// <auto-generated />
using System;
using EmployeeDirectory.Repository.ScaffoldData;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EmployeeDirectory.Repository.Migrations
{
    [DbContext(typeof(EmployeesDbContext))]
    [Migration("20240626072502_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.6");

            modelBuilder.Entity("EmployeeDirectory.Repository.ScaffoldData.DataConcerns.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("EmployeeDirectory.Repository.ScaffoldData.DataConcerns.Employee", b =>
                {
                    b.Property<string>("EmpNo")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly?>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageData")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("JoiningDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("LocationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ManagerId")
                        .HasColumnType("TEXT");

                    b.Property<string>("MobileNumber")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RoleId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StatusId")
                        .HasColumnType("INTEGER");

                    b.HasKey("EmpNo");

                    b.HasIndex(new[] { "LocationId" }, "IX_Employees_LocationId");

                    b.HasIndex(new[] { "ManagerId" }, "IX_Employees_ManagerId");

                    b.HasIndex(new[] { "ProjectId" }, "IX_Employees_ProjectId");

                    b.HasIndex(new[] { "RoleId" }, "IX_Employees_RoleId");

                    b.HasIndex(new[] { "StatusId" }, "IX_Employees_StatusId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("EmployeeDirectory.Repository.ScaffoldData.DataConcerns.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("EmployeeDirectory.Repository.ScaffoldData.DataConcerns.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("EmployeeDirectory.Repository.ScaffoldData.DataConcerns.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int>("LocationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "DepartmentId" }, "IX_Roles_DepartmentId");

                    b.HasIndex(new[] { "LocationId" }, "IX_Roles_LocationId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("EmployeeDirectory.Repository.ScaffoldData.DataConcerns.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("StatusType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Status", (string)null);
                });

            modelBuilder.Entity("EmployeeDirectory.Repository.ScaffoldData.DataConcerns.User", b =>
                {
                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageData")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Email")
                        .HasName("PK__Users__A9D105351C29FC86");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("EmployeeDirectory.Repository.ScaffoldData.DataConcerns.Employee", b =>
                {
                    b.HasOne("EmployeeDirectory.Repository.ScaffoldData.DataConcerns.Location", "Location")
                        .WithMany("Employees")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EmployeeDirectory.Repository.ScaffoldData.DataConcerns.Employee", "Manager")
                        .WithMany("InverseManager")
                        .HasForeignKey("ManagerId");

                    b.HasOne("EmployeeDirectory.Repository.ScaffoldData.DataConcerns.Project", "Project")
                        .WithMany("Employees")
                        .HasForeignKey("ProjectId");

                    b.HasOne("EmployeeDirectory.Repository.ScaffoldData.DataConcerns.Role", "Role")
                        .WithMany("Employees")
                        .HasForeignKey("RoleId")
                        .IsRequired();

                    b.HasOne("EmployeeDirectory.Repository.ScaffoldData.DataConcerns.Status", "Status")
                        .WithMany("Employees")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("Manager");

                    b.Navigation("Project");

                    b.Navigation("Role");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("EmployeeDirectory.Repository.ScaffoldData.DataConcerns.Role", b =>
                {
                    b.HasOne("EmployeeDirectory.Repository.ScaffoldData.DataConcerns.Department", "Department")
                        .WithMany("Roles")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EmployeeDirectory.Repository.ScaffoldData.DataConcerns.Location", "Location")
                        .WithMany("Roles")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("EmployeeDirectory.Repository.ScaffoldData.DataConcerns.Department", b =>
                {
                    b.Navigation("Roles");
                });

            modelBuilder.Entity("EmployeeDirectory.Repository.ScaffoldData.DataConcerns.Employee", b =>
                {
                    b.Navigation("InverseManager");
                });

            modelBuilder.Entity("EmployeeDirectory.Repository.ScaffoldData.DataConcerns.Location", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("Roles");
                });

            modelBuilder.Entity("EmployeeDirectory.Repository.ScaffoldData.DataConcerns.Project", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("EmployeeDirectory.Repository.ScaffoldData.DataConcerns.Role", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("EmployeeDirectory.Repository.ScaffoldData.DataConcerns.Status", b =>
                {
                    b.Navigation("Employees");
                });
#pragma warning restore 612, 618
        }
    }
}
